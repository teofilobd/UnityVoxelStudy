///
/// Voxel Renderer Kernel
/// 
/// I adapted my ray tracing renderer in https://github.com/teofilobd/URP-RayTracer
/// to use the raymarching approach in https://www.shadertoy.com/view/Xds3zN .
/// And then simplified to take into account only voxels.
/// 

// Main kernel
#pragma kernel CSMain

/// ---------------------------
/// Structs
/// ---------------------------

struct Ray
{
    float3 origin;
    float3 direction;
};

struct Voxel
{
    float3 origin;
    float size;
    float3 color;
    float2 uv;
    int voxelsVolumePropertiesID;
};

struct VoxelsVolumeProperties
{
    int textureID;
    int voxelStartID;
    int voxelsCount;
    float3 color;
    float3 volumeCenter;
    float3 volumeHalfDimensions;
};

struct TracingResult
{
    float distance;
    float m;
    float3 color;
    int voxelsVolumePropertiesID;
    float2 uv;
};

/// ---------------------------
/// Properties
/// ---------------------------

// Output texture
RWTexture2D<float4> Result;

// Texture array with textures used by set of voxels
Texture2DArray _TextureBuffer;
SamplerState sampler_TextureBuffer;

// Camera 
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _DirectionalLightDirection;
uint _VoxelsCount;
uint _VoxelsVolumesCount;
 
StructuredBuffer<Voxel> _Voxels;
StructuredBuffer<VoxelsVolumeProperties> _VoxelsVolumeProperties;

float sdot(in float3 v1, in float3 v2) 
{ 
    return saturate(dot(v1, v2)); 
}

float sdBox(in float3 p, in float3 b)
{
    float3 d = abs(p) - b;
    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));
}

// Uniform box SDF
float sdVoxel(in float3 p, in float size)
{
    return sdBox(p, size);
}


// Union SDF operation
TracingResult opU(in TracingResult result1, in TracingResult result2)
{
    if (result1.distance < result2.distance)
    {
        return result1;
    }
    else
    {
        return result2;
    }
}

// Find closest ray hit in scene, if any.
TracingResult scene(in float3 pos)
{
    TracingResult result;
    result.distance = 1e10;
    result.m = 0.0;
    result.color = float3(0.0, 0.0, 0.0);
    result.voxelsVolumePropertiesID = -1;
    result.uv = float2(0, 0);
 
    for (uint volumeID = 0; volumeID < _VoxelsVolumesCount; ++volumeID)
    {
        VoxelsVolumeProperties volumeProperties = _VoxelsVolumeProperties[volumeID];

        // check first if voxels volume bounding box is hit before processing voxels.
        if (sdBox(pos - volumeProperties.volumeCenter, volumeProperties.volumeHalfDimensions) < result.distance)
        {
            int maxVoxelID = volumeProperties.voxelStartID + volumeProperties.voxelsCount;
            for (int voxelID = volumeProperties.voxelStartID; voxelID < maxVoxelID; ++voxelID)
            {
                Voxel voxel = _Voxels[voxelID];
                TracingResult tracingResult;
                tracingResult.distance = sdVoxel(pos - voxel.origin, voxel.size * 0.5);
                tracingResult.m = 3;
                tracingResult.color = voxel.color;
                tracingResult.voxelsVolumePropertiesID = voxel.voxelsVolumePropertiesID;
                tracingResult.uv = voxel.uv;
                result = opU(result, tracingResult);
            }
        }
    }

    return result;
}

// Raymarch until hitting obstacle or reaching threshold.
TracingResult raycast(in Ray ray)
{
    TracingResult result;
    result.distance = -1.0;
    result.m = -1.0;
    result.color = float3(0.0, 0.0, 0.0);
    result.voxelsVolumePropertiesID = -1;
    result.uv = float2(0, 0);

    float tmin = 1.0;
    float tmax = 20.0;

    // raytrace floor plane
    float tp1 = (0.0 - ray.origin.y) / ray.direction.y;
    if (tp1 > 0.0)
    {
        tmax = min(tmax, tp1);
        result.distance = tp1;
        result.m = 1.0;
        result.color = float3(0.0, 0.3, 0.0);
        result.voxelsVolumePropertiesID = -1;
        result.uv = float2(0, 0);
    }

    // raymarch primitives       
    float t = tmin;
    for (int i = 0; i < 70 && t < tmax; i++)
    {
        TracingResult h = scene(ray.origin + ray.direction * t);
        if (abs(h.distance) < (0.0001 * t))
        {
            result.distance = t;
            result.m = h.m;
            result.color = h.color;
            result.voxelsVolumePropertiesID = h.voxelsVolumePropertiesID;
            result.uv = h.uv;
            break;
        }
        t += h.distance;
    }
    
    return result;
}

// http://iquilezles.org/www/articles/rmshadows/rmshadows.htm
float calcSoftshadow(in float3 ro, in float3 rd, in float mint, in float tmax)
{
    // bounding volume
    float tp = (10 - ro.y) / rd.y; 
    
    if (tp > 0.0) 
        tmax = min(tmax, tp);

    float res = 1.0;
    float t = mint;
    for (int i = 0; i < 24; i++)
    {
        float h = scene(ro + rd * t).distance;
        float s = saturate(8.0 * h / t);
        res = min(res, s * s * (3.0 - 2.0 * s));
        t += clamp(h, 0.02, 0.2);
        if (res<0.004 || t>tmax) break;
    }
    return saturate(res);
}

// http://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm
float3 calcNormal(in float3 pos)
{
    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times
    float3 n = float3(0,0,0);
    for (int i = 0; i < 4; i++)
    {
        float3 e = 0.5773 * (2.0 * float3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.0);
        n += e * scene(pos + 0.0005 * e).distance;
    }
    return normalize(n);
}

float3 render(in Ray ray)
{
    // background
    float3 col = float3(0.7, 0.7, 0.9) - max(ray.direction.y, 0.0) * 0.3;

    // raycast scene
    TracingResult tracingResult = raycast(ray);
    float t = tracingResult.distance;    
    float m = tracingResult.m;
    
    if (m > -0.5)
    {
        float3 pos = ray.origin + t * ray.direction;
        float3 normalDirection = (m < 1.5) ? float3(0.0, 1.0, 0.0) : calcNormal(pos);
        float3 reflectedRay = reflect(ray.direction, normalDirection);

        // material     
        float3 textureColor = float3(1, 1, 1);
        if (tracingResult.voxelsVolumePropertiesID != -1)
        {
            VoxelsVolumeProperties voxelsVolumeProperties = _VoxelsVolumeProperties[tracingResult.voxelsVolumePropertiesID];            
            textureColor = voxelsVolumeProperties.color;

            if (voxelsVolumeProperties.textureID != -1)
            {
                textureColor *= _TextureBuffer.SampleLevel(sampler_TextureBuffer, float3(tracingResult.uv, voxelsVolumeProperties.textureID), 0).rgb;
            }
        }

        col = tracingResult.color * textureColor;
        
        // Lighting        
        float3  lightDirection = _DirectionalLightDirection.xyz;
        col *= sdot(normalDirection, lightDirection) *calcSoftshadow(pos, lightDirection, 0.02, 2.5);
        
        // Fog
        col = lerp(col, float3(0.7, 0.7, 0.9), 1.0 - exp(-0.0001 * t * t * t));
    }

    return saturate(col);
}

Ray createCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    Ray ray = { origin, direction };
    return ray;
}

[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{ 
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    Ray ray = createCameraRay(uv);

    float3 col = render(ray);
    
    Result[id.xy] = float4(col, 1);
}
